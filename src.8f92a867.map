{"version":3,"sources":["Field.ts","Game.ts","Player.ts","Piece.ts","index.ts"],"names":[],"mappings":"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","file":"src.8f92a867.map","sourceRoot":"..\\src","sourcesContent":["import { IPiece } from './Piece';\r\nimport { IPlayer, IPosition } from './Player';\r\n\r\nexport interface IField {\r\n  width: number;\r\n  height: number;\r\n  matrix: number[][];\r\n\r\n  clear(): void;\r\n  collides(piece: IPiece, position: IPosition): boolean;\r\n  merge(piece: IPiece, position: IPosition): void;\r\n  sweep(player: IPlayer): void;\r\n}\r\n\r\nclass Field implements IField {\r\n  public matrix: number[][];\r\n  constructor(public width: number, public height: number) {\r\n    const matrix = [];\r\n    while (height--) { matrix.push(new Array(width).fill(0)); }\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  public clear = (): void => {\r\n    this.matrix.forEach((row) => row.fill(0));\r\n  }\r\n\r\n  public collides = (piece: IPiece, position: IPosition): boolean => {\r\n    return piece.matrix.some((row: number[], y: number) => row.some((cell: number, x: number) =>\r\n      cell && (this.matrix[y + position.y] && this.matrix[y + position.y][x + position.x]) !== 0));\r\n  }\r\n\r\n  public merge = (piece: IPiece, position: IPosition): void => {\r\n    piece.matrix.forEach((row: number[], y: number) => {\r\n      row.forEach((cell: number, x: number) => {\r\n        if (cell) this.matrix[y + position.y][x + position.x] = cell;\r\n      });\r\n    });\r\n  }\r\n\r\n  public sweep = (player: IPlayer): void => {\r\n    let rowCount = 1;\r\n\r\n    for (let y = this.matrix.length - 1; y > 0; y--) {\r\n      if (this.matrix[y].every((cell: number) => cell !== 0)) {\r\n        const row = this.matrix.splice(y, 1)[0].fill(0);\r\n        this.matrix.unshift(row);\r\n        y += 1;\r\n\r\n        player.score += rowCount * 10;\r\n        rowCount *= 2;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Field;\r\n","import { IField } from './Field';\r\nimport { IPlayer, IPosition } from './Player';\r\n\r\nexport interface IGame {\r\n  context: CanvasRenderingContext2D;\r\n  player: IPlayer;\r\n  field: IField;\r\n\r\n  run(time?: number): void;\r\n}\r\n\r\nconst colors = [\r\n  null,\r\n  '#e5282e',\r\n  '#f8d517',\r\n  '#df2384',\r\n  '#274696',\r\n  '#ef7e18',\r\n  '#5cad2c',\r\n  '#2cb099',\r\n];\r\n\r\nclass Game implements IGame {\r\n  public static dropInterval: number = 1000;\r\n  private lastTime: number = 0;\r\n  constructor(\r\n    public context: CanvasRenderingContext2D,\r\n    public player: IPlayer,\r\n    public field: IField,\r\n  ) {\r\n    player.game = this;\r\n    player.reset();\r\n    player.updateScore();\r\n  }\r\n\r\n  public run = (time: number = 0): void => {\r\n    const deltaTime: number = time - this.lastTime;\r\n    this.lastTime = time;\r\n\r\n    this.player.dropCounter += deltaTime;\r\n    if (this.player.dropCounter > Game.dropInterval) {\r\n      this.player.drop();\r\n    }\r\n\r\n    this.draw();\r\n    requestAnimationFrame(this.run);\r\n  }\r\n\r\n  private draw = (): void => {\r\n    this.context.fillStyle = '#000';\r\n    this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n    this.drawMatrix(this.field.matrix, { x: 0, y: 0 });\r\n    this.drawMatrix(this.player.piece.matrix, this.player.position);\r\n  }\r\n\r\n  private drawMatrix = (matrix: number[][], position: IPosition): void => {\r\n    matrix.forEach((row: number[], y: number) => {\r\n      row.forEach((cell: number, x: number) => {\r\n        if (cell) {\r\n          this.context.fillStyle = colors[cell];\r\n          this.context.fillRect(x + position.x, y + position.y, 1, 1);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import { IGame } from './Game';\r\nimport { IPiece } from './Piece';\r\n\r\nexport interface IPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IPlayer {\r\n  game: IGame;\r\n  piece: IPiece;\r\n  position: IPosition;\r\n  dropCounter: number;\r\n  score: number;\r\n\r\n  drop(): void;\r\n  inputController(e: KeyboardEvent): void;\r\n  reset(): void;\r\n  updateScore(): void;\r\n}\r\n\r\nexport const enum Direction {\r\n  Left = -1,\r\n  Right = 1,\r\n}\r\n\r\nexport const enum KeyCode {\r\n  Space = 32,\r\n  Left = 37,\r\n  Up,\r\n  Right,\r\n  Down,\r\n  W = 87,\r\n  A = 65,\r\n  S = 83,\r\n  D = 68,\r\n}\r\n\r\nclass Player implements IPlayer {\r\n  public dropCounter: number = 0;\r\n  public game: IGame;\r\n  public position: IPosition = { x: 0, y: 0 };\r\n  public score: number = 0;\r\n\r\n  constructor(public piece: IPiece) {}\r\n\r\n  public drop = (): void => {\r\n    this.position.y += 1;\r\n    if (this.game.field.collides(this.piece, this.position)) {\r\n      this.position.y -= 1;\r\n      this.game.field.merge(this.piece, this.position);\r\n      this.reset();\r\n      this.game.field.sweep(this);\r\n      this.updateScore();\r\n    }\r\n    this.dropCounter = 0;\r\n  }\r\n\r\n  public inputController = (e: KeyboardEvent): void => {\r\n    switch (e.keyCode) {\r\n      case KeyCode.Left:\r\n      case KeyCode.A:\r\n        this.move(Direction.Left);\r\n        break;\r\n\r\n      case KeyCode.Right:\r\n      case KeyCode.D:\r\n        this.move(Direction.Right);\r\n        break;\r\n\r\n      case KeyCode.Down:\r\n      case KeyCode.S:\r\n        this.drop();\r\n        break;\r\n\r\n      case KeyCode.Up:\r\n      case KeyCode.W:\r\n      case KeyCode.Space:\r\n        this.rotate();\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public reset = () => {\r\n    const type = Math.floor(this.piece.typesCount * Math.random());\r\n    this.piece.matrix = this.piece.createMatrix(type);\r\n\r\n    this.position.y = 0;\r\n    this.position.x = Math.floor(this.game.field.width / 2) - Math.floor(this.piece.matrix.length / 2);\r\n\r\n    if (this.game.field.collides(this.piece, this.position)) {\r\n      this.game.field.clear();\r\n      this.score = 0;\r\n      this.updateScore();\r\n    }\r\n  }\r\n\r\n  public updateScore = (): void =>  {\r\n    document.getElementById('score').innerText = `Score: ${this.score}`;\r\n  }\r\n\r\n  private move = (direction: Direction): void => {\r\n    this.position.x += direction;\r\n    if (this.game.field.collides(this.piece, this.position)) this.position.x -= direction;\r\n  }\r\n\r\n  private rotate = (): void => {\r\n    const initialX = this.position.x;\r\n    let offset: number = 1;\r\n    this.piece.rotate(Direction.Right);\r\n\r\n    while (this.game.field.collides(this.piece, this.position)) {\r\n      this.position.x += offset;\r\n      offset = -(offset > 0 ? offset + 1 : offset - 1);\r\n\r\n      if (offset > this.piece.matrix.length) {\r\n        this.piece.rotate(Direction.Left);\r\n        this.position.x = initialX;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import { Direction } from './Player';\r\n\r\nexport interface IPiece {\r\n  matrix: number[][];\r\n  type: Type;\r\n  typesCount: number;\r\n\r\n  createMatrix(type: Type): number[][];\r\n  rotate(direction: Direction): void;\r\n}\r\n\r\nexport enum Type {\r\n  I = 0, J, L, O, S, T, Z,\r\n}\r\n\r\nclass Piece implements IPiece {\r\n  public type: Type;\r\n  public matrix: number[][];\r\n  public get typesCount() {\r\n    return Object.keys(Type).length / 2;\r\n  }\r\n\r\n  constructor() {\r\n    this.type = Math.floor(this.typesCount * Math.random());\r\n    this.matrix = this.createMatrix(this.type);\r\n  }\r\n\r\n  public createMatrix = (type: Type): number[][] => {\r\n    switch (type) {\r\n      case Type.I:\r\n        return [\r\n          [0, 1, 0, 0],\r\n          [0, 1, 0, 0],\r\n          [0, 1, 0, 0],\r\n          [0, 1, 0, 0],\r\n        ];\r\n\r\n      case Type.J:\r\n        return [\r\n          [0, 2, 0],\r\n          [0, 2, 0],\r\n          [2, 2, 0],\r\n        ];\r\n\r\n      case Type.L:\r\n        return [\r\n          [0, 3, 0],\r\n          [0, 3, 0],\r\n          [0, 3, 3],\r\n        ];\r\n\r\n      case Type.O:\r\n      default:\r\n        return [\r\n          [4, 4],\r\n          [4, 4],\r\n        ];\r\n\r\n      case Type.S:\r\n        return [\r\n          [0, 5, 5],\r\n          [5, 5, 0],\r\n          [0, 0, 0],\r\n        ];\r\n\r\n      case Type.T:\r\n        return [\r\n          [6, 6, 6],\r\n          [0, 6, 0],\r\n          [0, 0, 0],\r\n        ];\r\n\r\n      case Type.Z:\r\n        return [\r\n          [7, 7, 0],\r\n          [0, 7, 7],\r\n          [0, 0, 0],\r\n        ];\r\n    }\r\n  }\r\n\r\n  public rotate = (direction: Direction = Direction.Right): void => {\r\n    for (let y = 0; y < this.matrix.length; y++) {\r\n      for (let x = 0; x < y; x++) {\r\n        [this.matrix[x][y], this.matrix[y][x]] = [this.matrix[y][x], this.matrix[x][y]];\r\n      }\r\n    }\r\n\r\n    if (direction === Direction.Right) {\r\n      this.matrix.forEach((row) => row.reverse());\r\n    } else {\r\n      this.matrix.reverse();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Piece;\r\n","import Field, { IField } from './Field';\r\nimport Game, { IGame } from './Game';\r\nimport Piece from './Piece';\r\nimport Player, { IPlayer } from './Player';\r\n\r\nconst canvas: HTMLCanvasElement = document.getElementById('tetris') as HTMLCanvasElement;\r\nexport const context: CanvasRenderingContext2D = canvas.getContext('2d');\r\n\r\ncontext.scale(20, 20);\r\n\r\nconst field: IField = new Field(12, 20);\r\nconst player: IPlayer = new Player(new Piece());\r\nconst game: IGame = new Game(context, player, field);\r\n\r\ndocument.addEventListener('keydown', player.inputController);\r\ngame.run();\r\n"]}